// Generated by CoffeeScript 1.7.0
(function() {
  var Console, ConsoleWidget, Modal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Modal = require('voxel-modal');

  ConsoleWidget = require('console-widget');

  module.exports = function(game, opts) {
    return new Console(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-keys']
  };

  Console = (function(_super) {
    __extends(Console, _super);

    function Console(game, opts) {
      var widgetOpts, _base, _ref;
      this.game = game;
      this.opts = opts;
      if (!this.game.isClient) {
        return;
      }
      if ((_base = this.opts).includeTextBindings == null) {
        _base.includeTextBindings = {
          'console': void 0,
          console2: '/',
          console3: '.'
        };
      }
      widgetOpts = this.opts;
      widgetOpts.closeKeys = [];
      this.widget = ConsoleWidget(widgetOpts);
      this.keys = (function() {
        if ((_ref = game.plugins.get('voxel-keys')) != null) {
          return _ref;
        } else {
          throw new Error('voxel-console requires voxel-keys plugin');
        }
      })();
      this.bindKeys();
      Console.__super__.constructor.call(this, game, {
        element: this.widget.containerNode
      });
    }

    Console.prototype.bindKeys = function() {
      return ['console', 'console2', 'console3'].forEach((function(_this) {
        return function(binding) {
          return _this.keys.down.on(binding, function() {
            var initialText;
            initialText = _this.opts.includeTextBindings[binding];
            return _this.open(initialText);
          });
        };
      })(this));
    };

    Console.prototype.open = function(initialText) {
      if (initialText == null) {
        initialText = void 0;
      }
      Console.__super__.open.call(this);
      return this.widget.open(initialText);
    };

    Console.prototype.close = function() {
      return Console.__super__.close.call(this);
    };

    Console.prototype.log = function(text) {
      return this.widget.log(text);
    };

    Console.prototype.logNode = function(node) {
      return this.widget.logNode(node);
    };

    return Console;

  })(Modal);

}).call(this);
